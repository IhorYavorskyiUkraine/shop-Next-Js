generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider  = "postgresql"
   url       = env("POSTGRES_URL")
   directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
   id               Int              @id @default(autoincrement())
   email            String           @unique
   password         String
   role             UserRole         @default(USER)
   createdAt        DateTime         @default(now())
   updatedAt        DateTime         @updatedAt
   fullName         String
   imageUrl         String?
   phone            String?
   address          String?
   usersAddressBook UserAddressBook?

   provider   String?
   providerId String?

   verificationCode VerificationCode?
   verified         DateTime?

   cart          Cart?
   orders        Order[]
   reviews       Review[]
   reviewReplies ReviewReply[]

   wishList WishList?
}

model VerificationCode {
   id Int @id @default(autoincrement())

   user   User @relation(fields: [userId], references: [id])
   userId Int  @unique

   code String

   createdAt DateTime @default(now())

   @@unique([userId, code])
}

model Review {
   id     Int   @id @default(autoincrement())
   rating Float

   product   Product @relation(fields: [productId], references: [id])
   productId Int

   author   User @relation(fields: [authorId], references: [id])
   authorId Int

   reviewReplies ReviewReply[]

   text String

   images ReviewImage[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model ReviewImage {
   id Int @id @default(autoincrement())

   url String

   review   Review? @relation(fields: [reviewId], references: [id], onDelete: Cascade)
   reviewId Int?
}

model ReviewReply {
   id Int @id @default(autoincrement())

   product   Product @relation(fields: [productId], references: [id])
   productId Int

   author   User @relation(fields: [authorId], references: [id])
   authorId Int

   review   Review @relation(fields: [reviewId], references: [id])
   reviewId Int

   text String

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Product {
   id                    Int                    @id @default(autoincrement())
   name                  String
   description           String?
   imageUrl              String
   price                 Int
   oldPrice              Int?
   rating                Float?
   productCategoryId     Int
   dressStyleId          Int
   createdAt             DateTime               @default(now())
   updatedAt             DateTime               @updatedAt
   categoryId            Int?
   productDetails        ProductDetails[]
   category              Category?              @relation(fields: [categoryId], references: [id])
   dressStyle            DressStyle             @relation(fields: [dressStyleId], references: [id])
   productCategory       ProductCategory        @relation(fields: [productCategoryId], references: [id])
   productVariantOptions ProductVariantOption[]
   reviews               Review[]
   cartItems             CartItem[]
   ReviewReply           ReviewReply[]
   brand                 ProductBrand           @relation(fields: [productBrandId], references: [id])
   productBrandId        Int
}

model ProductBrand {
   id Int @id @default(autoincrement())

   products Product[]

   name  String
   image String
}

model ProductDetails {
   id        Int      @id @default(autoincrement())
   product   Product? @relation(fields: [productId], references: [id])
   productId Int

   name  String
   value String
}

model ProductVariantOption {
   id            Int         @id @default(autoincrement())
   productId     Int
   colorId       Int
   price         Int
   oldPrice      Int?
   imageUrl      String[]
   stockQuantity Int         @default(0)
   createdAt     DateTime    @default(now())
   updatedAt     DateTime    @updatedAt
   CartItem      CartItem[]
   OrderItem     OrderItem[]
   color         Color       @relation(fields: [colorId], references: [id])
   product       Product     @relation(fields: [productId], references: [id])
   sizes         Size[]      @relation("ProductVariantOptionSizes")
}

model Category {
   id       Int       @id @default(autoincrement())
   name     String    @unique
   products Product[]
}

model ProductCategory {
   id       Int       @id @default(autoincrement())
   name     String    @unique
   products Product[]
}

model DressStyle {
   id       Int       @id @default(autoincrement())
   name     String    @unique
   products Product[]
}

model Size {
   id                    Int                    @id @default(autoincrement())
   size                  String                 @unique
   productVariantOptions ProductVariantOption[] @relation("ProductVariantOptionSizes")
   cartItems             CartItem[]
   OrderItem             OrderItem[]
}

model Color {
   id                    Int                    @id @default(autoincrement())
   color                 String                 @unique
   productVariantOptions ProductVariantOption[]
}

model Cart {
   id          Int        @id @default(autoincrement())
   user        User?      @relation(fields: [userId], references: [id])
   userId      Int?       @unique
   token       String?
   totalAmount Int        @default(0)
   createdAt   DateTime   @default(now())
   updatedAt   DateTime   @updatedAt
   items       CartItem[]
}

model CartItem {
   id                     Int                  @id @default(autoincrement())
   cart                   Cart                 @relation(fields: [cartId], references: [id])
   cartId                 Int
   product                Product              @relation(fields: [productId], references: [id])
   productId              Int
   productVariantOption   ProductVariantOption @relation(fields: [productVariantOptionId], references: [id])
   productVariantOptionId Int
   size                   Size                 @relation(fields: [sizeId], references: [id])
   sizeId                 Int
   quantity               Int                  @default(1)
   createdAt              DateTime             @default(now())
   updatedAt              DateTime             @updatedAt
}

model Order {
   id          Int         @id @default(autoincrement())
   userId      Int?
   token       String
   totalAmount Int
   paymentId   String?
   fullName    String
   email       String
   phone       String
   firstOrder  Boolean
   address     String
   comment     String?
   status      OrderStatus @default(PENDING)
   createdAt   DateTime    @default(now())
   updatedAt   DateTime    @updatedAt
   user        User?       @relation(fields: [userId], references: [id])
   items       OrderItem[]
}

model OrderItem {
   id                     Int                  @id @default(autoincrement())
   orderId                Int
   productVariantOptionId Int
   quantity               Int                  @default(1)
   price                  Int
   size                   Size                 @relation(fields: [sizeId], references: [id])
   sizeId                 Int
   createdAt              DateTime             @default(now())
   updatedAt              DateTime             @updatedAt
   order                  Order                @relation(fields: [orderId], references: [id])
   productVariantOption   ProductVariantOption @relation(fields: [productVariantOptionId], references: [id])
}

model UserAddressBook {
   id Int @id @default(autoincrement())

   user   User @relation(fields: [userId], references: [id])
   userId Int  @unique

   address Address[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Address {
   id Int @id @default(autoincrement())

   addressBook   UserAddressBook @relation(fields: [addressBookId], references: [id])
   addressBookId Int

   active Boolean @default(true)

   fullName  String
   phone     String
   city      String
   street    String
   house     String
   apartment String
   postcode  String

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model WishList {
   id Int @id @default(autoincrement())

   user   User @relation(fields: [userId], references: [id])
   userId Int  @unique

   items WishListItem[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model WishListItem {
   id Int @id @default(autoincrement())

   wishList   WishList @relation(fields: [wishListId], references: [id])
   wishListId Int

   name      String
   imageUrl  String
   rating    Float?
   price     Int
   oldPrice  Int?
   productId Int

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   @@index([wishListId])
}

enum OrderStatus {
   PENDING
   SUCCEEDED
   CANCELED
}

enum UserRole {
   USER
   ADMIN
}
