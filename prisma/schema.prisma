generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  role      UserRole   @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  fullName  String
  cart      Cart?
  orders    Order[]
  Purchase  Purchase[]
  reviews   Review[]
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int
  authorId   Int
  productId  Int
  purchaseId Int
  text       String
  author     User     @relation(fields: [authorId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
}

model Product {
  id                    Int                    @id @default(autoincrement())
  name                  String
  description           String?
  imageUrl              String
  price                 Int
  oldPrice              Int?
  rating                Float?
  productCategoryId     Int
  dressStyleId          Int
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  categoryId            Int?
  category              Category?              @relation(fields: [categoryId], references: [id])
  dressStyle            DressStyle             @relation(fields: [dressStyleId], references: [id])
  productCategory       ProductCategory        @relation(fields: [productCategoryId], references: [id])
  productVariantOptions ProductVariantOption[]
  Purchase              Purchase[]
  reviews               Review[]
}

model ProductVariantOption {
  id            Int         @id @default(autoincrement())
  productId     Int
  colorId       Int
  price         Int
  oldPrice      Int?
  imageUrl      String[]
  stockQuantity Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  CartItem      CartItem[]
  OrderItem     OrderItem[]
  color         Color       @relation(fields: [colorId], references: [id])
  product       Product     @relation(fields: [productId], references: [id])
  sizes         Size[]      @relation("ProductVariantOptionSizes")
}

model Purchase {
  id           Int      @id @default(autoincrement())
  userId       Int
  productId    Int
  purchaseDate DateTime @default(now())
  product      Product  @relation(fields: [productId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
  Review       Review[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model ProductCategory {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model DressStyle {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Size {
  id                    Int                    @id @default(autoincrement())
  size                  String                 @unique
  productVariantOptions ProductVariantOption[] @relation("ProductVariantOptionSizes")
}

model Color {
  id                    Int                    @id @default(autoincrement())
  color                 String                 @unique
  productVariantOptions ProductVariantOption[]
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      Int        @unique
  token       String?
  totalAmount Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  items       CartItem[]
}

model CartItem {
  id                     Int                  @id @default(autoincrement())
  cartId                 Int
  productVariantOptionId Int
  quantity               Int                  @default(1)
  imageUrl               String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  cart                   Cart                 @relation(fields: [cartId], references: [id])
  productVariantOption   ProductVariantOption @relation(fields: [productVariantOptionId], references: [id])
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  token       String
  totalAmount Int
  status      OrderStatus
  paymentId   String?
  fullName    String
  email       String
  phone       String
  address     String
  comment     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
}

model OrderItem {
  id                     Int                  @id @default(autoincrement())
  orderId                Int
  productVariantOptionId Int
  quantity               Int                  @default(1)
  price                  Int
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  order                  Order                @relation(fields: [orderId], references: [id])
  productVariantOption   ProductVariantOption @relation(fields: [productVariantOptionId], references: [id])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELED
}

enum UserRole {
  USER
  ADMIN
}
